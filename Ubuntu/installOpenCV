###Auto-Install for OpenCV
###Author: Struan Murray (https://github.com/Struan-Murray/OpenCV-Install)

RED='\033[0;31m'
GRN='\033[0;32m'
ORG='\033[0;33m'
BLU='\033[0;34m'
YEL='\033[1;33m'
NC='\033[0m'
C=0
F=0

###Compiler
printf "\n${BLU}STARTING${ORG}\n"
printf "${BLU}Installing Compiler${ORG}\n"
sudo apt-get -qq install build-essential
A=$?
if [ ! $A = 0 ]; then
	printf "${RED}Failure: $A @ $SECONDS s\n"
	F=$((F+1))
else
	printf "${GRN}Complete @ $SECONDS s\n"
	C=$((C+1))
fi

###Required libraries and installers
printf "${BLU}Installing graphics libraries and installers${ORG}\n"
sudo apt-get -qq install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev libcanberra-gtk-module
A=$?
if [ ! $A = 0 ]; then
	printf "${RED}Failure: $A @ $SECONDS s\n"
	F=$((F+1))
else
	printf "${GRN}Complete @ $SECONDS s\n"
	C=$((C+1))
fi

###Python development
#printf "${BLU}Installing Python development tools${ORG}\n"
#sudo apt-get -qq install python-dev python-numpy
#A=$?
#if [ ! $A = 0 ]; then
#	printf "${RED}Failure: $A @ $SECONDS s\n"
#	F=$((F+1))
#else
#	printf "${GRN}Complete @ $SECONDS s\n"
#	C=$((C+1))
#fi

###Image processing libraries
printf "${BLU}Installing Image processing libraries${ORG}\n"
sudo apt-get -qq install libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev 
A=$?
if [ ! $A = 0 ]; then
	printf "${RED}Failure: $A @ $SECONDS s\n"
	F=$((F+1))
else
	printf "${GRN}Complete @ $SECONDS s\n"
	C=$((C+1))
fi

###Suspect Libraries
#printf "${BLU}Installing Suspect libraries${RED}\n"
#sudo apt-get -qq install libjasper-dev
#A=$?
#if [ ! $A = 0 ]; then
#	printf "${RED}Failure: $A @ $SECONDS s\n"
#	F=$((F+1))
#else
#	printf "${GRN}Complete @ $SECONDS s\n"
#	C=$((C+1))
#fi

printf "${BLU}Removing redundant dependencies${ORG}\n"
sudo apt-get -qq autoremove
A=$?
if [ ! $A = 0 ]; then
	printf "${RED}Failure: $A @ $SECONDS s\n"
	F=$((F+1))
else
	printf "${GRN}Complete @ $SECONDS s\n"
	C=$((C+1))
fi

printf "\n${BLU}Synching opencv base-code${ORG}\n"
if [ -d opencv ]; then 
	if [ -L opencv ]; then
		### It's a symlink!
		
		rm opencv
		git clone https://github.com/opencv/opencv.git
	else
		### It's a directory!
		
		pushd ./opencv
		git pull
		popd
	fi
else
	git clone https://github.com/opencv/opencv.git
fi
A=$?
if [ ! $A = 0 ]; then
	printf "${RED}Failure: $A @ $SECONDS s\n"
	F=$((F+1))
else
	printf "${GRN}Complete @ $SECONDS s\n"
	C=$((C+1))
fi

printf "${BLU}Configuring with CMake${ORG}\n"
cd opencv
if [ -d "build" ]; then
        if [ -L "build" ]; then
                ### It is a symlink!
                
                rm "build"
                mkdir build
		cd build
        else
                ### It's a directory!
                
                cd build                            
        fi
else
        mkdir build
	cd build
fi
cmake -Wno-dev -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local ..
A=$?
if [ ! $A = 0 ]; then
	printf "${RED}Failure: $A @ $SECONDS s\n"
	F=$((F+1))
else
	printf "${GRN}Complete @ $SECONDS s\n"
	C=$((C+1))
fi

printf "${BLU}Building with make${ORG}\n"
make -j4
A=$?
if [ ! $A = 0 ]; then
	printf "${RED}Failure: $A @ $SECONDS s\n"
	F=$((F+1))
else
	printf "${GRN}Complete @ $SECONDS s\n"
	C=$((C+1))
fi

printf "${BLU}Installing libraries${ORG}\n"
sudo make install
A=$?
if [ ! $A = 0 ]; then
	printf "${RED}Failure: $A @ $SECONDS s\n"
	F=$((F+1))
else
	printf "${GRN}Complete @ $SECONDS s\n"
	C=$((C+1))
fi

T=$((C+F))
printf "\n${NC}Install Finished with:\n${GRN}$C Completed Succesfully & \n${RED}$F Failed \n${NC}Out of $T processes in $SECONDS s.\n\n"
